/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Savings as PrismaSavings,
  User as PrismaUser,
} from "@prisma/client";

export class SavingsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SavingsCountArgs, "select">): Promise<number> {
    return this.prisma.savings.count(args);
  }

  async savingsItems(
    args: Prisma.SavingsFindManyArgs
  ): Promise<PrismaSavings[]> {
    return this.prisma.savings.findMany(args);
  }
  async savings(
    args: Prisma.SavingsFindUniqueArgs
  ): Promise<PrismaSavings | null> {
    return this.prisma.savings.findUnique(args);
  }
  async createSavings(args: Prisma.SavingsCreateArgs): Promise<PrismaSavings> {
    return this.prisma.savings.create(args);
  }
  async updateSavings(args: Prisma.SavingsUpdateArgs): Promise<PrismaSavings> {
    return this.prisma.savings.update(args);
  }
  async deleteSavings(args: Prisma.SavingsDeleteArgs): Promise<PrismaSavings> {
    return this.prisma.savings.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.savings
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
