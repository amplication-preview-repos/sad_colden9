/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Spending } from "./Spending";
import { SpendingCountArgs } from "./SpendingCountArgs";
import { SpendingFindManyArgs } from "./SpendingFindManyArgs";
import { SpendingFindUniqueArgs } from "./SpendingFindUniqueArgs";
import { CreateSpendingArgs } from "./CreateSpendingArgs";
import { UpdateSpendingArgs } from "./UpdateSpendingArgs";
import { DeleteSpendingArgs } from "./DeleteSpendingArgs";
import { Device } from "../../device/base/Device";
import { User } from "../../user/base/User";
import { CastingPeriodInput } from "../CastingPeriodInput";
import { SpendingService } from "../spending.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Spending)
export class SpendingResolverBase {
  constructor(
    protected readonly service: SpendingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Spending",
    action: "read",
    possession: "any",
  })
  async _spendingsMeta(
    @graphql.Args() args: SpendingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Spending])
  @nestAccessControl.UseRoles({
    resource: "Spending",
    action: "read",
    possession: "any",
  })
  async spendings(
    @graphql.Args() args: SpendingFindManyArgs
  ): Promise<Spending[]> {
    return this.service.spendings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Spending, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Spending",
    action: "read",
    possession: "own",
  })
  async spending(
    @graphql.Args() args: SpendingFindUniqueArgs
  ): Promise<Spending | null> {
    const result = await this.service.spending(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Spending)
  @nestAccessControl.UseRoles({
    resource: "Spending",
    action: "create",
    possession: "any",
  })
  async createSpending(
    @graphql.Args() args: CreateSpendingArgs
  ): Promise<Spending> {
    return await this.service.createSpending({
      ...args,
      data: {
        ...args.data,

        device: args.data.device
          ? {
              connect: args.data.device,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Spending)
  @nestAccessControl.UseRoles({
    resource: "Spending",
    action: "update",
    possession: "any",
  })
  async updateSpending(
    @graphql.Args() args: UpdateSpendingArgs
  ): Promise<Spending | null> {
    try {
      return await this.service.updateSpending({
        ...args,
        data: {
          ...args.data,

          device: args.data.device
            ? {
                connect: args.data.device,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Spending)
  @nestAccessControl.UseRoles({
    resource: "Spending",
    action: "delete",
    possession: "any",
  })
  async deleteSpending(
    @graphql.Args() args: DeleteSpendingArgs
  ): Promise<Spending | null> {
    try {
      return await this.service.deleteSpending(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Device, {
    nullable: true,
    name: "device",
  })
  @nestAccessControl.UseRoles({
    resource: "Device",
    action: "read",
    possession: "any",
  })
  async getDevice(@graphql.Parent() parent: Spending): Promise<Device | null> {
    const result = await this.service.getDevice(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Spending): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => String)
  async StartCastingPeriod(
    @graphql.Args()
    args: CastingPeriodInput
  ): Promise<string> {
    return this.service.StartCastingPeriod(args);
  }
}
