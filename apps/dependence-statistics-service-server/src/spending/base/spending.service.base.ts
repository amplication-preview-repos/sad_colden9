/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Spending as PrismaSpending,
  Device as PrismaDevice,
  User as PrismaUser,
} from "@prisma/client";

export class SpendingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SpendingCountArgs, "select">): Promise<number> {
    return this.prisma.spending.count(args);
  }

  async spendings(
    args: Prisma.SpendingFindManyArgs
  ): Promise<PrismaSpending[]> {
    return this.prisma.spending.findMany(args);
  }
  async spending(
    args: Prisma.SpendingFindUniqueArgs
  ): Promise<PrismaSpending | null> {
    return this.prisma.spending.findUnique(args);
  }
  async createSpending(
    args: Prisma.SpendingCreateArgs
  ): Promise<PrismaSpending> {
    return this.prisma.spending.create(args);
  }
  async updateSpending(
    args: Prisma.SpendingUpdateArgs
  ): Promise<PrismaSpending> {
    return this.prisma.spending.update(args);
  }
  async deleteSpending(
    args: Prisma.SpendingDeleteArgs
  ): Promise<PrismaSpending> {
    return this.prisma.spending.delete(args);
  }

  async getDevice(parentId: string): Promise<PrismaDevice | null> {
    return this.prisma.spending
      .findUnique({
        where: { id: parentId },
      })
      .device();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.spending
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
